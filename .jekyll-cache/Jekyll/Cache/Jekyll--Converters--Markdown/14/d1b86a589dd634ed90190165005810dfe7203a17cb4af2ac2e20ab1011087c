I"¸<p>Function are one of the most important component of any programming language. Function is basically a block of code that you want to use repeatidly. Function have two major things.</p>

<ul>
  <li>Function Declaration</li>
  <li>Function Call</li>
</ul>

<p>Function is declared initially and later on it is called whenever needed. There are two main types of functions,</p>

<ul>
  <li>Built-in Functions</li>
  <li>User-defined Functions</li>
</ul>

<p>Built-in functions are prebuild in language and we use them by giving a simple function call. The most common example of built-in function is <code class="language-plaintext highlighter-rouge">var_dump()</code>. Secondly the user-defined functions are defined by user himself. The syntax of defining a function in php is very simple. You simple have to write <code class="language-plaintext highlighter-rouge">function</code> keyword then <code class="language-plaintext highlighter-rouge">function_name</code> and after it you write small parenthesis <code class="language-plaintext highlighter-rouge">()</code> and following it comes the pair of curly braces <code class="language-plaintext highlighter-rouge">{}</code>.</p>

<p>There are multiple functions if you categorize them on the basis of their functionality. Iâ€™m listing some of them,</p>

<ul>
  <li>Built-in Function</li>
  <li>User-defined Function</li>
  <li>Simple Function</li>
  <li>Returning Value Function</li>
  <li>Anonymous Function</li>
  <li>Parameterize Function</li>
  <li>Variable Function</li>
</ul>

<p>Now let us see an example of how a user-defined function look like and how it works. Keep in mind that after function declaration, you must have to give a function call inorder to use that function. Also, you can call other functions in a function. But do condition calling else you might get stuck in infinite loop. Here is a simple example of multiple function calls and a function call within a function.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;?php

function test(){
    echo "function test";    
}


test(); //function call
test();
test();
test();
?&gt;

&lt;?php
function dummy(){
    echo "&lt;h1&gt;User Details&lt;/h1&gt;";
}

function displayUserDetails(){
    dummy();
    echo "Username is SANDY";
    echo "&lt;br/&gt;";
    echo "User age is 27";
    echo "&lt;br/&gt;";
    echo "User email id is sandy@test.com";
    echo "&lt;hr/&gt;";
}

displayUserDetails();
displayUserDetails();
?&gt;
</code></pre></div></div>

<h2 id="parameterized-function">Parameterized Function</h2>

<p>Parameterized functions are used where you want to pass some value and perform operations on it. The values are recieved in the variables defined in the <code class="language-plaintext highlighter-rouge">()</code> of function. Here is a small demonstration of it.</p>

<p><img src="/assets/images/clt/all-about-php-functions/1.png" alt="1" /></p>

<p>Iâ€™ve also written some example code for better understanding.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;?php

function sum($a,$b){
    echo $a+$b;
    echo "&lt;br/&gt;";
}

sum(20,50);
sum(100,200);
sum(23,76);

?&gt;
</code></pre></div></div>

<p>Here is another example in which iâ€™m using html within php,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;?php

function userData($name,$color){
    echo "&lt;h1 style='color:$color'&gt;$name&lt;/h1&gt;";
}

userData('sandy','green');
userData('andy','red');
userData('peter','orange');

?&gt;
</code></pre></div></div>

<h2 id="return-statement">Return Statement</h2>

<p>The <code class="language-plaintext highlighter-rouge">return</code> and <code class="language-plaintext highlighter-rouge">echo</code> might works like same in some cases but they are actually different. <code class="language-plaintext highlighter-rouge">echo</code> simply displays the output while the <code class="language-plaintext highlighter-rouge">return</code> return backs the output which can be used for multiple purpose. Here is a basic code of it,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>?&gt;

&lt;?php
function userName(){
    return "SANDY";
}

echo "&lt;h1&gt;user name is" .userName()."&lt;h1&gt;";

?&gt;
</code></pre></div></div>

<h2 id="passing-parameters">Passing Parameters</h2>

<p>In a function, you can also pass parameters. Either you can refer to default parameters or you can send the parameters by yourself. In the below example iâ€™m one parameter from the function call while the other one if define as <code class="language-plaintext highlighter-rouge">default</code> parameter.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;?php
function fruit($name,$color="red"){
    echo "this is $name and it's color is $color";
}

fruit("apple");
?&gt;  
</code></pre></div></div>

<p>Iâ€™ve also written a bit complex example in which iâ€™ve two parameters both define by default in the function declaration but in the function call iâ€™m also passing the new values for the parameters. Take a look at it,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;?php

function displayUser($name='candy',$color="orange"){
    echo "&lt;h1 style='color:$color'&gt;$name&lt;h1&gt;";
}


displayUser('SANDY','blue');

?&gt;
</code></pre></div></div>

<h2 id="nested-function">Nested Function</h2>

<p>Whenever a function is defined inside another function, it is called as nested function. Keep in mind that for a child function you must have to call parent function first. Else it will not work. Youâ€™ll get better understanding from the code below,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;?php

function test(){
    echo "test function called &lt;br/&gt;";
    
    function apple(){
        echo "apple function called &lt;br/&gt;";
}
}

test();
apple();

?&gt;
</code></pre></div></div>

<p>Also general syntax of it is like this,</p>

<p><img src="/assets/images/clt/all-about-php-functions/2.png" alt="2" /></p>

<h2 id="variable-function">Variable Function</h2>

<p>Whenever you define a function and store its call in a variable, it is called as Variable Function. Also there is a concept of <strong>callback</strong> function. When you pass a function as a parameter, it is caleld as callback function. Keep in mind that whenever you define a variable function, you simple have to write the function name in the form of string without parenthesis and store in variable. 
The syntax of variable function look like this,</p>

<p><img src="/assets/images/clt/all-about-php-functions/3.png" alt="" /></p>

<p>Here is a complete code for better understanding of both concepts.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;?php

function test(){
    echo "test function called";
}


function apple(){

}

$test="test";
$apple="apple";
function main($test){
    echo "main function called";
    $test();
}

main($test);
main($apple);
// echo $test;

?&gt;
</code></pre></div></div>
:ET