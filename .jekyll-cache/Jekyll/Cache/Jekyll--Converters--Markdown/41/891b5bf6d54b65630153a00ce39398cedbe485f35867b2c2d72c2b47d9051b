I"‰<p>Today, we are going to build anther Artificial Neural Network for one of the famous dataset known as <strong>MNIST</strong>. It is use to classify digits(0-9). Here is also colab-notebook attached for the code
<a href="https://colab.research.google.com/drive/1SqETl3Zi1EEesdJfEv6_QimB-M-YjKGx?usp=sharing">Python-Notebook</a></p>

<p>Initially we did all the necessary importings,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import tensorflow
from tensorflow import keras
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense,Flatten
</code></pre></div></div>
<p>Then simply load the dataset using keras, it will automatically do the train and test split.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(X_train,y_train),(X_test,y_test)=keras.datasets.mnist.load_data()
</code></pre></div></div>

<p>Visualize the shape of train and test,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>X_test.shape
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>y_test.shape
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>X_train.shape
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>y_train.shape
</code></pre></div></div>

<p><strong>y_train</strong> will be the labels array.</p>

<p>Then import plotting library and do some plotting of training data to acutually visualize the digits.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import matplotlib.pyplot as plt
plt.imshow(X_train[2])
</code></pre></div></div>

<p>Now scale the data to better calculate the parameters e.g weight and bias.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>X_train=X_train/255
X_test=X_test/255
</code></pre></div></div>

<p>Lets make our ANN now with keras sequential() model,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>model = Sequential()

model.add(Flatten(input_shape=(28,28)))
model.add(Dense(128,activation='relu'))
model.add(Dense(32,activation='relu'))
model.add(Dense(10,activation='softmax'))
</code></pre></div></div>

<p><strong>Flatten</strong> will convert the 28x28 matrix into single long array.</p>

<p>View the model summary using,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>model.summary()
</code></pre></div></div>

<p>Add the loss function to our model,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>model.compile(loss='sparse_categorical_crossentropy',optimizer='Adam',metrics=['accuracy'])
</code></pre></div></div>

<p>Now fit the model on our training data to calculate the weight and bias,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>history=model.fit(X_train,y_train,epochs=25,validation_split=0.2)
# history = model.fit(X_train,y_train,epochs=25,validation_split=0.2)
</code></pre></div></div>

<p>The model will run for 25 epochs. It is now time to make some predictions from our model,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>y_prob=model.predict(X_test)
y_pred = y_prob.argmax(axis=1)
y_pred
</code></pre></div></div>

<p>Inorder to check accuracy of our model <strong>import accuracy_score</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_pred)
</code></pre></div></div>

<p>Also we will check the overfitting by plotting the loss and validation_loss,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
</code></pre></div></div>
<p><img src="/assets/images/clt/handwritten-digit-classification-using-ann/1.png" alt="1" /></p>

<p>Now compare the accuracy with the validation_accuracy</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
</code></pre></div></div>
<p><img src="/assets/images/clt/handwritten-digit-classification-using-ann/2.png" alt="2" /></p>

<p>Lets test our model on a random value from the testing data,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>plt.imshow(X_test[9])
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>model.predict(X_test[9].reshape(1,28,28)).argmax(axis=1)
</code></pre></div></div>

<p><img src="/assets/images/clt/handwritten-digit-classification-using-ann/3.png" alt="3" /></p>
:ET