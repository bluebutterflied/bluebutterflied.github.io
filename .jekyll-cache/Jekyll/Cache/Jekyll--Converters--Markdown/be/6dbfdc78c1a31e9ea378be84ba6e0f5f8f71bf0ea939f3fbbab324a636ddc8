I"/<p>There are some problems which cannot be solved with a sequential model, therefore we need non-sequential model. Sequential model goes on with the assumption of single input and single output. What if you’ve to predict two things? What if linear topology doesnot solve your problem.</p>

<p>In order to make non-sequential model, we use keras-functional-api. First of all import the model from keras,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from keras.models import Model
</code></pre></div></div>

<p>Then simply create the model but don’t run the cell and leave inputs and outputs empty for now,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>model=Model(inputs=,outputs=)
</code></pre></div></div>

<p>Import all keras-layers,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from keras.layers import *
</code></pre></div></div>

<p>Define an input shape for your model,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>x=Input(shape=(3,))
</code></pre></div></div>

<p>Create hidden layers and output layers for the model,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>hidden1=Dense(128,activation='relu')(x)
hidden2=Dense(64,activation='relu')(hidden1)
output1=Dense(1,activation='linear')(hidden2)
output2=Dense(1,activation='sigmoid')(hidden2)
</code></pre></div></div>

<p>You can see we’ve two outputs for the above architecture one with the activation function of sigmoid and other with the linear function. Now go back to the cell which we left where we were creating the model and give the inputs and outputs,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>model=Model(inputs=x,outputs=[output1,output2])
</code></pre></div></div>

<p>Now check the model summary,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>model.summary()
</code></pre></div></div>

<p><img src="/assets/images/clt/non-linear-neural-networks/2.png" alt="2" /></p>

<p>At the end plot the model for visual demonstration of model architecture,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from keras.utils import plot_model
plot_model(model,show_shapes=True)
</code></pre></div></div>
<p>Here is how it will look,</p>

<p><img src="/assets/images/clt/non-linear-neural-networks/1.png" alt="1" /></p>

<h2 id="multi-input-model">Multi-Input Model</h2>

<p>Simply do the imports of Model and Layers,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from keras.layers import *
from keras.models import Model
</code></pre></div></div>

<p>Then defined two inputs,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>inputA=Input(shape=(32,))
inputB=Input(shape=(128,))
</code></pre></div></div>

<p>Define first branch for first input,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>x=Dense(8,activation="relu")(inputA)
x1=Dense(4,activation="relu")(x)
</code></pre></div></div>

<p>and second branch for second input,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>y=Dense(64,activation="relu")(inputB)
y1=Dense(32,activation="relu")(y)
y2=Dense(4,activation="relu")(y1)
</code></pre></div></div>

<p>combine output of both branches,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>combined=concatenate([x1,y2])
</code></pre></div></div>

<p>then apply fully connected layer on combined output,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># apply a FC layer and then a regression prediction on the
# combined outputs
z = Dense(2, activation="relu")(combined)
z1 = Dense(1, activation="linear")(z)
</code></pre></div></div>

<p>define the model and its input at the end,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># our model will accept the inputs of the two branches and
# then output a single value
model = Model(inputs=[inputA, inputB], outputs=z1)
</code></pre></div></div>

<p>Check the model summary,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>model.summary()
</code></pre></div></div>

<p><img src="/assets/images/clt/non-linear-neural-networks/3.png" alt="3" /></p>

<p>at the end plot the model,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from keras.utils import plot_model
plot_model(model)
</code></pre></div></div>

<p><img src="/assets/images/clt/non-linear-neural-networks/4.png" alt="4" /></p>

<h2 id="age-gender-project">Age Gender Project</h2>

<p>Do necessary imports,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
</code></pre></div></div>

<p>download the dataset on your notebook,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>!kaggle datasets download -d jangedoo/utkface-new
</code></pre></div></div>

<p>unzip the dataset,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import zipfile
zip = zipfile.ZipFile("/content/utkface-new.zip",'r')
zip.extractall("/content")
zip.close()
</code></pre></div></div>

<p>import the datagenerator for data-augmentation,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import os
import numpy as np
import pandas as pd
from keras.preprocessing.image import ImageDataGenerator
</code></pre></div></div>

<p>define a path for data augmentation folder,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>folder_path = '/content/utkface_aligned_cropped/UTKFace'
</code></pre></div></div>

<p>define the dataframe format,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>age=[]
gender=[]
img_path=[]
for file in os.listdir(folder_path):
  age.append(int(file.split('_')[0]))
  gender.append(int(file.split('_')[1]))
  img_path.append(file)  
</code></pre></div></div>

<p>check length of age,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>len(age)
</code></pre></div></div>

<p>create the dataframe,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>df=pd.DataFrame({'age':age,'gender':gender,'img':img_path})
</code></pre></div></div>

<p>check the shape of dataframe,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>df.shape
</code></pre></div></div>

<p>dataframe will look like this,</p>

<p><img src="/assets/images/clt/non-linear-neural-networks/5.png" alt="5" /></p>

<p>check the head,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>df.head()
</code></pre></div></div>

<p>divide the data into train and test,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>train_df=df.sample(frac=1,random_state=0).iloc[:20000]
test_df=df.sample(frac=1,random_state=0).iloc[20000:]
</code></pre></div></div>

<p>check the train shape,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>train_df.shape
</code></pre></div></div>

<p>and the test shape,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>test_df.shape
</code></pre></div></div>

<p>define the imageGenerator parameters for train and test data,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>train_datagen = ImageDataGenerator(rescale=1./255,
                                   rotation_range=30,
                                   width_shift_range=0.2,
                                   height_shift_range=0.2,
                                   shear_range=0.2,
                                   zoom_range=0.2,
                                   horizontal_flip=True)

test_datagen = ImageDataGenerator(rescale=1./255)
</code></pre></div></div>

<p>generate the data with generators,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>train_generator = train_datagen.flow_from_dataframe(train_df,
                                                    directory=folder_path,
                                                    x_col='img',
                                                    y_col=['age','gender'],
                                                    target_size=(200,200),
                                                    class_mode='multi_output')

test_generator = test_datagen.flow_from_dataframe(test_df,
                                                    directory=folder_path,
                                                    x_col='img',
                                                    y_col=['age','gender'],
                                                    target_size=(200,200),
                                                  class_mode='multi_output')
</code></pre></div></div>

<p><img src="/assets/images/clt/non-linear-neural-networks/6.png" alt="6" /></p>

<p>import the resNet50 model,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from keras.applications.resnet50 import ResNet50
from keras.layers import *
from keras.models import Model
</code></pre></div></div>

<p>create the instance of resnet50 and define its parameters,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>resnet = ResNet50(include_top=False, input_shape=(200,200,3))
</code></pre></div></div>

<p>complete the model architecture by adding dense and flatten layers to resNet50,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>resnet = ResNet50(include_top=False, input_shape=(200,200,3))

resnet.trainable=False

output = resnet.layers[-1].output

flatten = Flatten()(output)

dense1 = Dense(512, activation='relu')(flatten)
dense2 = Dense(512,activation='relu')(flatten)

dense3 = Dense(512,activation='relu')(dense1)
dense4 = Dense(512,activation='relu')(dense2)

output1 = Dense(1,activation='linear',name='age')(dense3)
output2 = Dense(1,activation='sigmoid',name='gender')(dense4)
</code></pre></div></div>

<p>define model with inputs and outputs,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>model=Model(inputs=resnet.input,outputs=[output1,output2])
</code></pre></div></div>

<p>compile the model,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>model.compile(optimizer='adam',loss={'age':'mae','gender':'binary_crossentropy'},metrics={'age':'mae','gender':'accuracy'},loss_weights={'age':1,'gender':99})
</code></pre></div></div>

<p>at the end fit the model,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>model.fit(train_generator, batch_size=32, epochs=10, validation_data=test_generator)
</code></pre></div></div>

<p><img src="/assets/images/clt/non-linear-neural-networks/7.png" alt="7" /></p>

:ET