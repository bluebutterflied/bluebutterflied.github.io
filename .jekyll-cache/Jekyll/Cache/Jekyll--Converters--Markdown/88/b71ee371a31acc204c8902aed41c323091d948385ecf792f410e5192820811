I"U<p>Perceptron is no doubt the core-component of Deep-Learning. When it comes to single-perceptron. It is best suited for the Linear-Data. Linear-Data means which can be classified into two classes easily by a single-line or classifier.</p>

<p>For this purpose, showing the classification results using multiple python codes. Initially import all the necessary libraries:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns 

</code></pre></div></div>
<p>Then making 3-empty datasets using pandas-dataframe.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
or_data=pd.DataFrame()
and_data=pd.DataFrame()
xor_data=pd.DataFrame()
</code></pre></div></div>

<p>Then fill-in the Dataframes:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
or_data['input1']=[1,1,0,0]
or_data['input2']=[1,0,1,0]
or_data['output']=[1,1,1,0]
</code></pre></div></div>

<p>Then import the simple perceptron model from sklearn and make 3 instances of it:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from sklearn.linear_model import Perceptron
clf1=Perceptron()
clf2=Perceptron()
clf3=Perceptron()
</code></pre></div></div>
<p>Then fit-in the data using our datasets:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>clf1.fit(and_data.iloc[:,0:2].values,and_data.iloc[:,-1].values)
clf2.fit(or_data.iloc[:,0:2].values,or_data.iloc[:,-1].values)
clf3.fit(xor_data.iloc[:,0:2].values,xor_data.iloc[:,-1].values)
</code></pre></div></div>

<p>If you plot the the clf1 and as it is trained on linearly separable data, it will look like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>plt.plot(x,y)
sns.scatterplot(x='input1',y='input2',data=and_data,hue='output',s=200)
</code></pre></div></div>

<!-- ![A test image](/assets/images/clt/image.png) -->
<p><img src="/assets/images/clt/perceptron-for-non-linear-data/perceptron-linear-data1.png" alt="Perceptron on linear-data image" /></p>

<p>Similarly if you plot the second perceptron classifier instance, which was trained on <code class="language-plaintext highlighter-rouge">or</code> data. It will look like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>plt.plot(x,y)
sns.scatterplot(x='input1',y='input2',hue='output',data=or_data,s=200)
</code></pre></div></div>

<p><img src="/assets/images/clt/perceptron-for-non-linear-data/perceptron-linear-data2.png" alt="Perceptron on linear-data OR image" />
You can also get the idea of it by a visul representation from <a href="https://playground.tensorflow.org/#activation=sigmoid&amp;batchSize=10&amp;dataset=gauss&amp;regDataset=reg-plane&amp;learningRate=0.01&amp;regularizationRate=0&amp;noise=10&amp;networkShape=&amp;seed=0.71127&amp;showTestData=false&amp;discretize=false&amp;percTrainData=50&amp;x=true&amp;y=true&amp;xTimesY=false&amp;xSquared=false&amp;ySquared=false&amp;cosX=false&amp;sinX=false&amp;cosY=false&amp;sinY=false&amp;collectStats=false&amp;problem=classification&amp;initZero=false&amp;hideText=false">PlayGround.Tensorflow</a>
<img src="/assets/images/clt/perceptron-for-non-linear-data/perceptron-for-non-linear-data/playgrountensorflow.png" alt="playgroundtensorflow" /></p>

<p>Now if you apply the same single perceptron model on non-linearly separable data. It will look like this:</p>

<p><img src="/assets/images/clt/perceptron-for-non-linear-data/perceptron-non-linear-data3.png" alt="Perceptron-non-linear-issue" /></p>

<p><img src="/assets/images/clt/perceptron-for-non-linear-data/perceptron-linear-data4.png" alt="Per-non-linear-issue-2nd-image" /></p>

<p>Here you can see that our <code class="language-plaintext highlighter-rouge">Perceptron-Model</code> doesnot work for non-linear data. This was the issue with the use of single-perceptron.</p>
:ET