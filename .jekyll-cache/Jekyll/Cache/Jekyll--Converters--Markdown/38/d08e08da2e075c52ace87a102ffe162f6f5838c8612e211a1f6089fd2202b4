I"s	<p>As we know that a single perceptron is not able to classify non-linear data, you can check out my blog on this <a href="/2021/02/07/perceptron-issue-for-non-linear-data">Perceptron Issue</a>. So how we can classify non-linear data using <code class="language-plaintext highlighter-rouge">Multi-Layer-Perceptron</code>.</p>

<p>We all know that a single-perceptron cannot converge on non-linear data. This means that it cannot draw the Decision Boundaries in the data. This is where multi-layer-percetpron comes into play. Multi-Layer-Perceptron uses smoothing and super-imposition concepts to draw the decision boundaries. The output of one layer of perceptron becomes the input for the next hidden layer and thus your classification results are ore and more accurate. Here is a basic MLP architecture:</p>

<p><img src="/assets/images/rletters/deep-learning/mlp-1.jpeg" alt="basic mlp network" /></p>

<h2 id="layers-breakdown">Layers Breakdown:</h2>
<p>You can see here, we have multiple layers, each layer with multiple perceptrons. The initial layer labelled as 1 is the input layer, the middle layers with label 2 and 3 are the hidden layers and the layer 4 is called the output layer.</p>

<p>In a MLP-architecture,you’ve to calculate three things:</p>
<ul>
  <li>Weight</li>
  <li>Bias</li>
  <li>Output</li>
</ul>

<p><img src="/assets/images/rletters/deep-learning/mlp-2.jpeg" alt="mlp-2" /></p>

<p>Also at the end we combine the multiple perceptron outputs and pass them through the activation function. While in the case of single perceptron, the output z was passed through the activation function. But here in MLP, there are multiple hidden layers. Keep in mind that you can change the architecture of MLP using 4 methods:</p>

<ul>
  <li>Increase the nodes in hidden layers</li>
  <li>Increase the nodes in input layer</li>
  <li>Increase the nodes in output layer</li>
  <li>Increase the number of hidden layers</li>
</ul>

<p>Here you can see the basic training flow and the first two architecture changes.</p>

<p><img src="/assets/images/rletters/deep-learning/mlp-3.jpeg" alt="mlp-3" /></p>

<p>Also the examples of the 3rd and 4th way to change the mlp architecture can be demonstrated by below note snippet,</p>

<p><img src="/assets/images/rletters/deep-learning/mlp-4.jpeg" alt="mlp-4" /></p>

<p>Now, i’m going show some demonstrations of how well MLP performs on a non-linear data.</p>
:ET