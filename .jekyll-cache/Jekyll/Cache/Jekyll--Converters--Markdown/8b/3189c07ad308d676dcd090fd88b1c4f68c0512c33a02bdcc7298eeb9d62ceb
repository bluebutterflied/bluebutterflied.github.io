I"	<p>Queue is also one of the famous data structure. Although it is pretty similar to stack but it has its own applications. You might know the working law of Queue <strong>‚ÄúTHE-FIFO-Principal‚Äù</strong>. Here i‚Äôve defined some rules of queue alongside with its implementaion in <code class="language-plaintext highlighter-rouge">c++</code>/</p>

<h2 id="rules">Rules</h2>

<p>The queue follow the basic rule of,</p>

<ul>
  <li>First In First Out.</li>
  <li>Two pointers will be used in queue.</li>
  <li>One will be used for insertion and the second one will be used in deletion.</li>
  <li>Insertion in queue in known as Enqueue.</li>
  <li>Deletion in queue is known as Dequeue.</li>
  <li>Insertion in queue is done through rear pointer.</li>
  <li>Deletion through queue is done through front pointer.</li>
  <li>Queue can be implemented by two ways.</li>
  <li>First by: Array data structure</li>
  <li>Second by: Linked List data structure.</li>
</ul>

<h2 id="implementation">Implementation</h2>

<p>Below is the provided code of Linked List Implementation of queue.I have covered the 4 basic functions of the queue in ths implementation.</p>

<ul>
  <li>Enqueue(): Insertion in queue.</li>
  <li>Dequeue(): Deletion in queue.</li>
  <li>isFull(): Checking whether the queue is Full or not.</li>
  <li>isEmpty(): Checking whether the queue is Empty or not.</li>
</ul>

<h2 id="code-in-c">Code In C++</h2>

<p>Here are the initial imports,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#include&lt;iostream&gt;
using namespace std;
</code></pre></div></div>

<p>Then define a node class for a basic node objects,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class Node{
    public:
    int data;
    Node*next;
    Node(int data){
        this-&gt;data=data;
        next=NULL;
    }
};
</code></pre></div></div>

<p>Now we‚Äôve the queue class,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class Queued{
    private:
    Node*front,*rear;
    int length;
    public:
    Queued(){
        front=rear=NULL;
        length=0;
    }
    void Enqueue(int valve){
        Node*n=new Node(valve);
        if(front==NULL){
            cout&lt;&lt;"Queue is Empty right now, u can insert elements: "&lt;&lt;endl;
            front=rear=n;
        }
        else{
            rear-&gt;next=n;
            rear=n;
        }
    }
    int Dequeue(){
        if(front!=NULL){
        Node*t=front;
        front=front-&gt;next;
        cout&lt;&lt;"The value stored in the Node was: ";
        if(t-&gt;data!=0){
        return t-&gt;data;}
        }
    }
    bool isEmpty(){
        if(front==NULL){
            return true;
        }
    }
    bool isFull(){
        if(front==rear){
            return true;
        }
    }
};
</code></pre></div></div>

<p>At the end we‚Äôve the objects and function calls in the <code class="language-plaintext highlighter-rouge">main</code> of function,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>int main(){
    Queued obj1;
    obj1.Enqueue(25);
    obj1.Enqueue(28);
    obj1.Enqueue(28);
    obj1.Enqueue(25);
    cout&lt;&lt;obj1.Dequeue()&lt;&lt;endl;
    cout&lt;&lt;obj1.Dequeue()&lt;&lt;endl;
    cout&lt;&lt;obj1.Dequeue()&lt;&lt;endl;
    cout&lt;&lt;obj1.Dequeue()&lt;&lt;endl;
    if(obj1.isEmpty()){
        cout&lt;&lt;"The Queue is Empty: ";
    }
    cout&lt;&lt;"\n";
    /*
    if(obj1.isFull()){
        cout&lt;&lt;"The Queue is Full: ";
    }
    */
}
</code></pre></div></div>

<p>Before running, do remember to keep the complete code in a single file with a <code class="language-plaintext highlighter-rouge">cpp</code> extension.</p>
:ET